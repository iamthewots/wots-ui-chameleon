@use "../functions/theme";
@use "../settings/variables";
@use "sass:color";
@use "sass:map";
@use "sass:meta";

@mixin set-color-palette($palette-name, $palette-map) {
    @if (meta.type-of($palette-map) != map) {
        @error "Palette structure must be a sass map";
    }
    @each $shade in primary, secondary, tertiary {
        $color: map.get($palette-map, $shade);
        @if (meta.type-of($color) != color) {
            @error "Invalid color provided";
        }
        $color-lighter: color.scale(
            $color,
            $lightness: variables.$def-shade-delta
        );
        $color-darker: color.scale(
            $color,
            $lightness: variables.$def-shade-delta * -1
        );
        $color-text: var(--clr-text-dark);
        @if (theme.is-color-dark($color) == true) {
            $text-shade: var(--clr-text-light);
        }

        --clr-#{$palette-name}-#{$shade}: #{$color};
        --clr-#{$palette-name}-#{$shade}-lighter: #{$color-lighter};
        --clr-#{$palette-name}-#{$shade}-darker: #{$color-darker};
        --clr-#{$palette-name}-#{$shade}-text: #{$color-text};
    }

    $color-overlay: map.get($palette, variables.$DEF-OVERLAY-SHADE);
    $color-shadow: map.get($palette, variables.$def-shadow-shade);
    $color-shadow-primary: color.change(
        $color-shadow,
        $alpha: variables.$def-shadow-primary-alpha
    );
    $color-shadow-secondary: color.change(
        $color-shadow,
        $alpha: variables.$def-shadow-secondary-alpha
    );

    --clr-#{$palette-name}-border: var(
        --clr-#{$palette-name}-#{variables.$DEF-BORDER-SHADE}
    );
    --clr-#{$palette-name}-shadow-primary: #{$color-shadow-primary};
    --clr-#{$palette-name}-shadow-secondary: #{$color-shadow-secondary};
}

@mixin create-color-palette-classes($palette-name) {
    @each $shade in primary, secondary, tertiary {
        .bkg-#{$palette-name}-#{$shade} {
            background-color: var(--clr-#{$palette-name}-#{$shade});
            color: var(--clr-#{$palette-name}-#{$shade}-text);
        }

        .brd-#{$palette}-#{$shade} {
            border-color: var(
                --clr-#{$palette-name}-#{variables.$DEF-BORDER-SHADE}
            );
        }

        .bsh-#{$palette}-#{$shade} {
            box-shadow: theme.get-box-shadow($palette-name);

            &-hover:hover {
                box-shadow: theme.get-box-shadow($palette-name);
            }
        }

        .clr-#{$palette}-#{$shade} {
            color: var(--clr-#{$palette-name}-#{$shade});
        }

        .grd-#{$palette}-#{$shade} {
            background: theme.get-linear-gradient(#{$palette-name}-#{$shade});
            color: var(--clr-#{$palette-name}-#{$shade}-text);
        }
    }

    .pal-#{$palette-name} {
        @each $shade in primary, secondary, tertiary {
            --clr-#{$shade}: var(--clr-#{$palette-name}-#{$shade});
            --clr-#{$shade}-lighter: var(
                --clr-#{$palette-name}-#{$shade}-lighter
            );
            --clr-#{$shade}-darker: var(
                --clr-#{$palette-name}-#{$shade}-darker
            );
            --clr-#{$shade}-text: var(--clr-#{$palette-name}-#{$shade}-text);
        }

        --clr-border: var(
            --clr-#{$palette-name}-#{variables.$DEF-BORDER-SHADE}
        );
        --clr-shadow-primary: var(--clr-#{$palette-name}-shadow-primary);
        --clr-shadow-primary: var(--clr-#{$palette-name}-shadow-secondary);
    }
}
