@use "../functions/theme";
@use "../mixins/responsive";
@use "../mixins/style";
@use "../settings/defaults";
@use "sass:color";
@use "sass:map";
@use "sass:meta";

@mixin set-color-palette($palette-name, $palette-map) {
    @if (meta.type-of($palette-map) != map) {
        @error "Palette-map must be a sass map";
    }
    $settings: theme.parse-palette-settings($palette-map);
    @each $shade in defaults.$SHADES {
        $color: map.get($palette-map, $shade);
        @if (meta.type-of($color) != color) {
            @error "Invalid color provided:" $color;
        }

        $delta-light: color.scale($color, $lightness: defaults.$SHADES-DELTA);
        $delta-dark: color.scale(
            $color,
            $lightness: defaults.$SHADES-DELTA * -1
        );
        $text: var(--clr-text-dark);
        @if (theme.is-color-dark($color) == true) {
            $text: var(--clr-text-light);
        }

        --clr-#{$palette-name}-#{$shade}: #{$color};
        --clr-#{$palette-name}-#{$shade}-lighter: #{$delta-light};
        --clr-#{$palette-name}-#{$shade}-darker: #{$delta-dark};
        --clr-#{$palette-name}-#{$shade}-text: #{$text};
    }

    $overlay: color.change(
        map.get($palette-map, defaults.$OVERLAY-SHADE),
        $alpha: defaults.$OVERLAY-ALPHA
    );
    $border: map.get($palette-map, defaults.$BORDER-SHADE);
    @if (theme.is-color-dark($border)) {
        $border: color.scale($border, $lightness: defaults.$SHADES-DELTA);
    } @else {
        $border: color.scale($border, $lightness: defaults.$SHADES-DELTA * -1);
    }
    $shadow-primary: color.change(
        map.get($palette-map, defaults.$SHADOW-SHADE),
        $alpha: defaults.$SHADOW-PRIMARY-ALPHA
    );
    @if (theme.is-color-dark($shadow-primary)) {
        $shadow-primary: color.scale(
            $shadow-primary,
            $lightness: defaults.$SHADES-DELTA
        );
    } @else {
        $shadow-primary: color.scale(
            $shadow-primary,
            $lightness: defaults.$SHADES-DELTA * -1
        );
    }
    $shadow-secondary: color.change(
        map.get($palette-map, defaults.$SHADOW-SHADE),
        $alpha: defaults.$SHADOW-SECONDARY-ALPHA
    );
    @if (theme.is-color-dark($shadow-secondary)) {
        $shadow-secondary: color.scale(
            $shadow-secondary,
            $lightness: defaults.$SHADES-DELTA
        );
    } @else {
        $shadow-secondary: color.scale(
            $shadow-secondary,
            $lightness: defaults.$SHADES-DELTA * -1
        );
    }

    --clr-#{$palette-name}-border: #{$border};
    --clr-#{$palette-name}-overlay: #{$overlay};
    --clr-#{$palette-name}-shadow-primary: #{$shadow-primary};
    --clr-#{$palette-name}-shadow-secondary: #{$shadow-secondary};
}

@mixin set-general-palette($palette) {
    @each $shade in defaults.$SHADES {
        --clr-#{$shade}: var(--clr-#{$palette}-#{$shade});
        --clr-#{$shade}-lighter: var(--clr-#{$palette}-#{$shade}-lighter);
        --clr-#{$shade}-darker: var(--clr-#{$palette}-#{$shade}-darker);
        --clr-#{$shade}-text: var(--clr-#{$palette}-#{$shade}-text);
    }
    @each $id in border, overlay, shadow-primary, shadow-secondary {
        --clr-#{$id}: var(--clr-#{$palette}-#{$id});
    }
}

@mixin create-color-helper-classes($palette: null) {
    $id: "";
    @if ($palette != null) {
        $id: -#{$palette};
    }

    @each $shade in defaults.$SHADES {
        .bkg#{$id}-#{$shade} {
            background-color: var(--clr#{$id}-#{$shade});
            color: var(--clr#{$id}-#{$shade}-text);
        }

        .brd#{$id}-#{$shade} {
            border-color: var(--clr#{$id}-#{$shade});
        }

        .clr#{$id}-#{$shade} {
            color: var(--clr#{$id}-#{$shade});
        }

        .grd#{$id}-#{$shade} {
            @include style.gradient(#{$palette}-#{$shade}, linear);
        }
    }

    .bsh#{$id} {
        @include style.box-shadow($palette);

        &-hover:hover {
            @include responsive.set-response-to-mouse() {
                @include style.box-shadow($palette);
            }
        }
    }
}

@mixin create-color-palette-classes($palette) {
    @include create-color-helper-classes($palette);
    .pal-#{$palette} {
        @include set-general-palette($palette);
    }
}
