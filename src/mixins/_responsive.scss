@use "../functions";
@use "../settings/defaults";
@use "sass:map";
@use "sass:meta";

@mixin set-response-to($breakpoint, $screen-query: min-width) {
    $width: null;
    @if (map.has-key(defaults.$BREAKPOINTS, $breakpoint)) {
        $width: map.get(defaults.$BREAKPOINTS, $breakpoint);
    } @else if (meta.type-of($breakpoint) == number) {
        $width: $breakpoint;
    } @else {
        @warn "No valid breakpoint provided, set-response-to not applied";
    }

    @if ($width != null) {
        @media screen and (#{$screen-query}: #{$width}) {
            @content;
        }
    }
}

@mixin add-hover-modifier() {
}

@mixin add-responsive-modifiers() {
    @content;

    @each $size in defaults.$SIZES {
        @each $eval in after, before {
            $query: min-width;
            @if ($eval == before) {
                $query: max-width;
            }

            &-#{$eval}-#{$size} {
                @include set-response-to($size, $query) {
                    @content;
                }
            }
        }
    }
}

@mixin use-responsive-design($method: fixed) {
    @if ($method == fixed) {
        html {
            font-size: var(--responsive-fs-xs);

            @include set-response-to(sm) {
                font-size: var(--responsive-fs-sm);
            }
            @include set-response-to(md) {
                font-size: var(--responsive-fs-md);
            }
            @include set-response-to(lg) {
                font-size: var(--responsive-fs-lg);
            }
            @include set-response-to(xl) {
                font-size: var(--responsive-fs-xl);
            }
        }
    } @else if ($method == fluid) {
        html {
            font-size: max(10px, 0.666vw);

            @media (min-aspect-ratio: 18/9) {
                font-size: max(10px, 0.333vw);
            }
        }
    }
}
