@use "../settings/defaults";
@use "sass:color";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@function check-color($color) {
    @if (meta.type-of($color) != color) {
        @error "Invalid color provided:" $color;
    }
    @return $color;
}

@function get-color-luminance($color) {
    $color: check-color($color);

    $red: color.red($color) * 0.299;
    $green: color.green($color) * 0.587;
    $blue: color.blue($color) * 0.114;

    @return $red + $green + $blue;
}

@function is-color-dark($color) {
    $color: check-color($color);

    $luminance: get-color-luminance($color);
    @if ($luminance > 130) {
        @return false;
    } @else {
        @return true;
    }
}

@function parse-palette-settings($palette-map) {
    @if (meta.type-of($palette-map) != map) {
        @error "Invalid settings provided, it should be a sass map";
    }

    $default-settings: (
        border-shade: defaults.$BORDER-SHADE,
        overlay-shade: defaults.$OVERLAY-SHADE,
        shades-delta: defaults.$SHADES-DELTA,
        shadow-shade: defaults.$SHADOW-SHADE,
    );
    $settings: map.get($palette-map, settings);
    @if (meta.type-of($settings) != map) {
        @return $default-settings;
    }

    $parsed-settings: ();
    @each $key, $value in $default-settings {
        $parsed-value: $value;
        @if (map.has-key($settings, $key)) {
            $parsed-value: map.get($settings, $key);
        }

        $parsed-settings: map.set($parsed-settings, $key, $parsed-value);
    }
    @return $parsed-settings;
}

@function string-contains-shade-name($string) {
    @each $shade in defaults.$SHADES {
        @if (string.index($string, $shade)) {
            @return true;
        }
    }
    @return false;
}
